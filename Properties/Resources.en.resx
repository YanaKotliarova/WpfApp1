<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AwaitExport" xml:space="preserve">
    <value>The export may take some time, please wait...</value>
  </data>
  <data name="AwaitImport" xml:space="preserve">
    <value>The import may take some time, please wait...</value>
  </data>
  <data name="BackButton" xml:space="preserve">
    <value>Back</value>
  </data>
  <data name="ChooseDate" xml:space="preserve">
    <value>Choose date</value>
  </data>
  <data name="ChooseFileEx" xml:space="preserve">
    <value>You have not selected a file</value>
  </data>
  <data name="CityWord" xml:space="preserve">
    <value>City</value>
  </data>
  <data name="ConnectionToDbSuccesfull" xml:space="preserve">
    <value>The connection to the database was completed successfully</value>
  </data>
  <data name="CountryWord" xml:space="preserve">
    <value>Country</value>
  </data>
  <data name="CreatedSelectionView" xml:space="preserve">
    <value>The created selection can be seen in the created file: "{0}" or on the viewing pages</value>
  </data>
  <data name="DataImported" xml:space="preserve">
    <value>The data has been uploaded to the database and is ready for export</value>
  </data>
  <data name="DataIsLoading" xml:space="preserve">
    <value>Data is loading...</value>
  </data>
  <data name="DateWord" xml:space="preserve">
    <value>Date</value>
  </data>
  <data name="DefaultExportTextBoxMessage" xml:space="preserve">
    <value>Enter the data for selection and then click the export button</value>
  </data>
  <data name="DefaultImportTextBoxMessage" xml:space="preserve">
    <value>Please select the file to import</value>
  </data>
  <data name="EnterButton" xml:space="preserve">
    <value>Enter</value>
  </data>
  <data name="EnterConnectionString" xml:space="preserve">
    <value>Enter the relevant DB connection string:</value>
  </data>
  <data name="EnterDataForSelection" xml:space="preserve">
    <value>Enter the data for selection for export:</value>
  </data>
  <data name="ExExcelFileIsEmpty" xml:space="preserve">
    <value>There is no available page in the Excel file or it is empty</value>
  </data>
  <data name="ExFileOpening" xml:space="preserve">
    <value>Open file error</value>
  </data>
  <data name="ExFileSaving" xml:space="preserve">
    <value>Save file error</value>
  </data>
  <data name="ExLetterInput" xml:space="preserve">
    <value>Only letter input is possible!</value>
  </data>
  <data name="ExportButton" xml:space="preserve">
    <value>Export</value>
  </data>
  <data name="ExWrongConnectionString" xml:space="preserve">
    <value>Invalid DB connection string</value>
  </data>
  <data name="ExWrongFileFormat" xml:space="preserve">
    <value>Invalid file format</value>
  </data>
  <data name="FileCreatedSuccesfully" xml:space="preserve">
    <value>The file {0} was successfully created</value>
  </data>
  <data name="FirstNameWord" xml:space="preserve">
    <value>Name</value>
  </data>
  <data name="HeaderConnectionEstablished" xml:space="preserve">
    <value>Connection is establiched</value>
  </data>
  <data name="HeaderConnectionEx" xml:space="preserve">
    <value>An error occurred while connecting to the DB</value>
  </data>
  <data name="HeaderExportCompleted" xml:space="preserve">
    <value>Export completed!</value>
  </data>
  <data name="HeaderExportEx" xml:space="preserve">
    <value>An error occurred while creating the file</value>
  </data>
  <data name="HeaderImportCompleted" xml:space="preserve">
    <value>Import completed!</value>
  </data>
  <data name="HeaderImportEx" xml:space="preserve">
    <value>An error occurred while importing</value>
  </data>
  <data name="HeaderInvalidImput" xml:space="preserve">
    <value>Invalid imput</value>
  </data>
  <data name="HeaderOpenPageEx" xml:space="preserve">
    <value>An error occurred while navigating to the page</value>
  </data>
  <data name="HeaderTryAgain" xml:space="preserve">
    <value>Try again</value>
  </data>
  <data name="HeaderUnexpectedEx" xml:space="preserve">
    <value>An unexpected error has occurred</value>
  </data>
  <data name="HeaderUnexpectedSelectionEx" xml:space="preserve">
    <value>An unexpected error occurred while creating the selection</value>
  </data>
  <data name="HeaderWaitPlease" xml:space="preserve">
    <value>Wait, please!</value>
  </data>
  <data name="HeadetOpenFileEx" xml:space="preserve">
    <value>An error occurred while opening the file</value>
  </data>
  <data name="ImportButton" xml:space="preserve">
    <value>Import</value>
  </data>
  <data name="LastNameWord" xml:space="preserve">
    <value>Surname</value>
  </data>
  <data name="OpenFileButton" xml:space="preserve">
    <value>Open</value>
  </data>
  <data name="OpenCsvFileExtensionFilter" xml:space="preserve">
    <value>Special text files (*.csv) | *.csv</value>
  </data>
  <data name="OpenFileForViewEx" xml:space="preserve">
    <value>Make sure that:
1) the file is not open in another application
2) this is one of the files you created
3) the file is not corrupted</value>
  </data>
  <data name="PatronymicWord" xml:space="preserve">
    <value>Patronymic</value>
  </data>
  <data name="SaveFileExtensionFilter" xml:space="preserve">
    <value>Excel document|*.xlsx|Xml document|*.xml</value>
  </data>
  <data name="OpenExcelXmlFileExtensionFilter" xml:space="preserve">
    <value>Excel document|*.xlsx|Xml document|*.xml</value>
  </data>
  <data name="UsersWord" xml:space="preserve">
    <value>Users</value>
  </data>
  <data name="UserWord" xml:space="preserve">
    <value>User</value>
  </data>
  <data name="ViewFileButton" xml:space="preserve">
    <value>Viewing
a file</value>
  </data>
  <data name="ViewSelectionButton" xml:space="preserve">
    <value>Viewing
a selection</value>
  </data>
  <data name="WorksheetWord" xml:space="preserve">
    <value>Page1</value>
  </data>
</root>